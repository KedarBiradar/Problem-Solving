/*#include <cstdio>
#include <vector>
#include <algorithm>
#include <stack>

using namespace std;

struct tuple
{
	long long d,w;
	tuple(long long _d,long long _w): d(_d),w(_w){}
};

long long DFS(vector< vector<tuple> >graph,long long v,long long source,long long count)
{
	//static long long count=0;
	long long i,curr;
	bool visited[v+1];
	vector<tuple>::iterator it;
	for(i=0;i<=v;i++)
		visited[i]=false;

	stack<int> stk;
	long long prev=0;
	stk.push(source);
	visited[source]=true;
	while(!stk.empty())
	{
		curr=stk.top();
		stk.pop();
		printf("%lld\t",curr);
		for(it=graph[curr].begin();it!=graph[curr].end();it++)
		{
			tuple t=*it;
			if(t.w>prev)
			{
				visited[t.d]=true;
				stk.push(t.d);
				prev=t.w;
				count++;
			}
		}
	}
	return count;
}
int compare(tuple t1,tuple t2)
{
	return t1.w<=t2.w;
}
int main()
{
	int n,e,i;
	scanf("%d%d",&n,&e);
	long long s,d,w,tmp,max=0;
	vector< vector<tuple> >graph(n+1);
	for(i=0;i<e;i++)
	{
		scanf("%lld%lld%lld",&s,&d,&w);
		graph[s].push_back(tuple(d,w));
	}
	for(i=1;i<n;i++)
	{
		sort(graph[i].begin(),graph[i].end(),compare);
	}
	for(i=1;i<n;i++)
	{
		tmp=DFS(graph,n,i,0);
		printf("\n");
		if(tmp>max)
			max=tmp;
	}
	printf("\n%lld\n",max);
	return 0;
}

*/


#include <cstdio>
#include <limits.h>

#define INT_MAX1 9999

int graph[100][100];

void floydWarshell(int n)
{
	int i,j,k;
	int cost[n+1][n+1];
	int minwt[n+1][n+1];
	int maxwt[n+1][n+1];

	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(graph[i][j]!=0)
			{
				cost[i][j]=1;
				minwt[i][j]=graph[i][j];
				maxwt[i][j]=graph[i][j];
			}
			else
			{
				cost[i][j]=0;
				minwt[i][j]=0;
				maxwt[i][j]=0;
			}
		}
	}

	for(k=0;k<n;k++)
	{
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				if(maxwt[i][k]<minwt[k][j] && cost[i][k]+cost[k][j]>cost[i][j])
				{
					cost[i][j]=cost[i][k]+cost[k][j];
					minwt[i][j]=minwt[i][k];
					maxwt[i][j]=maxwt[k][j];
				}
			}
		}
	}

	//printf("distance from vertex 1\n");
	int max=0;
	for(i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			printf("%d\t",cost[i][j]);
			if(max<cost[i][j])
				max=cost[i][j];	
		}
		printf("\n");
	}
	printf("\n%d\n",max);
}

int main()
{
	int n,e,i,j,s,d,wt;
	scanf("%d%d",&n,&e);
	for(i=0;i<=n;i++)
		for(j=0;j<=n;j++)
			graph[i][j]=0;

	for(i=0;i<e;i++)
	{
		scanf("%d%d%d",&s,&d,&wt);
		graph[s-1][d-1]=wt;
	}
	for(i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(graph[i][j]==0)
				printf("INF\t");
			else
				printf("%d\t",graph[i][j]);
		}
		printf("\n");
	}

	floydWarshell(n);
}
